/*
Миша уже научился хорошо фотографировать и недавно увлекся программированием. 
Первая программа, которую он написал, позволяет формировать негатив бинарного черно-белого изображения.

Бинарное черно-белое изображение – это прямоугольник, состоящий из пикселей, каждый из которых может быть либо черным, либо белым. 
Негатив такого изображения получается путем замены каждого черного пикселя на белый, а каждого белого пикселя – на черный.

Миша, как начинающий программист, написал свою программу с ошибкой, поэтому в результате ее исполнения мог получаться некорректный негатив. 
Для того чтобы оценить уровень несоответствия получаемого негатива исходному изображению, Миша начал тестировать свою программу.

В качестве входных данных он использовал исходные изображения. Сформированные программой негативы он начал тщательно анализировать, 
каждый раз определяя число пикселей негатива, которые получены с ошибкой.

Требуется написать программу, которая в качестве входных данных использует исходное бинарное черно-белое изображение и полученный 
Мишиной программой негатив, и на основе этого определяет количество пикселей, в которых допущена ошибка.

Входные данные
Первая строка входного файла INPUT.TXT содержит целые числа n и m (1 ≤ n, m ≤ 100) – высоту и ширину исходного изображения (в пикселях). 
Последующие n строк содержат описание исходного изображения. Каждая строка состоит из m символов «B» и «W». Символ «B» соответствует черному пикселю, 
а символ «W» – белому. Далее следует пустая строка, а после нее – описание выведенного Мишиной программой изображения в том же формате, что и исходное изображение.

Выходные данные
В выходной файл OUTPUT.TXT необходимо вывести число пикселей негатива, которые неправильно сформированы Мишиной программой.
*/


int[] ReadPositionArrayElement()
{
    Console.Write("Введите 2 числа позиции элемента в двумерном массиве через пробел: ");

    int[] IntReadString = new int[2];
    while (true)
    {

        string[] ReadString = Console.ReadLine()!.Split();
        if (ReadString.Length != 2)
        {
            Console.Write("Необходимо ввести 2 числа позиции, повторите ввод: ");
        }
        else if (int.TryParse(ReadString[0], out IntReadString[0]) && int.TryParse(ReadString[1], out IntReadString[1]))
        {
            break;
        }
        else
        {
            Console.Write("Введены некорректные числа, повторите попытку ввода:");
        }
    }
    return IntReadString;
}

void FillRandomArray(string[,] array)
{
    for (int i = 0; i < array.GetLength(0); i++)
    {
        for (int j = 0; j < array.GetLength(1); j++)
        {
            array[i, j] = (new Random().Next(0, 2) == 0)?"B":"W";
        }
    }
}

//Выводит массив в консоль
void PrintArray(string[,] array)
{
    for (int i = 0; i < array.GetLength(0); i++)
    {
        for (int j = 0; j < array.GetLength(1); j++)
        {
            Console.Write(array[i, j]);
        }
        Console.WriteLine();
    }
}

//Функция считает несовпадающие символы в двух массивах
int CountErrorPixel(string[,] OriginMatrix, string[,] NegativeMatrix)
{
    int count = 0;

    for (int i = 0; i < OriginMatrix.GetLength(0); i++)
    {
        for (int j = 0; j < OriginMatrix.GetLength(1); j++)
        {
            //Должно быть равно, так как мы сравниваем негатив с орегиналом, и ошибкой будет одинаковое значение
            if(OriginMatrix[i, j] == NegativeMatrix[i, j]) count++;
        }
    }

    return count;
}

//Считываем из консоли размерность массива
int[] PositionArray = ReadPositionArrayElement();
//Создаем массивы с орегинальным и негативным изображениями
string[,] array = new string[PositionArray[0], PositionArray[1]];
string[,] NegativeArray = new string[PositionArray[0], PositionArray[1]];
//Заполняем орегинальное изображение случайными числами
FillRandomArray(array);
//Заполняем негативное изображение случайными числами, просто, что бы отличались
FillRandomArray(NegativeArray);
//выводим получившийся орегинальный массив
PrintArray(array);
Console.WriteLine();
//выводим получившийся негативный массив
PrintArray(NegativeArray);
Console.WriteLine($"Кол-во ошибочных пикселей = {CountErrorPixel(array, NegativeArray)}");